// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MoviesDatabaseApplication.Models;

#nullable disable

namespace MoviesDatabaseApplication.Migrations
{
    [DbContext(typeof(MoviesDatabaseContext))]
    [Migration("20240402084727_m")]
    partial class m
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MoviesDatabaseApplication.Models.Castcrew", b =>
                {
                    b.Property<int>("CastId")
                        .HasColumnType("int")
                        .HasColumnName("CastID");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("CastId")
                        .HasName("PK__Castcrew__68A1291C7B1D9864");

                    b.ToTable("Castcrew", (string)null);
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<string>("PlotSynopsis")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PosterArt")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateOnly>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<TimeOnly>("Runtime")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("MovieId")
                        .HasName("PK__Movies__4BD2943AC37B7FD7");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.MovieCast", b =>
                {
                    b.Property<int>("MoviecastId")
                        .HasColumnType("int")
                        .HasColumnName("MoviecastID");

                    b.Property<int>("CastId")
                        .HasColumnType("int")
                        .HasColumnName("CastID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.HasKey("MoviecastId")
                        .HasName("PK__MovieCas__A2A1C493CD6F4B6D");

                    b.HasIndex("CastId");

                    b.HasIndex("MovieId");

                    b.ToTable("MovieCast", (string)null);
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.Review", b =>
                {
                    b.Property<int>("ReviewId")
                        .HasColumnType("int")
                        .HasColumnName("ReviewID");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.HasKey("ReviewId")
                        .HasName("PK__Review__74BC79AE2ACA7769");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Role_name");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("RoleId")
                        .HasName("PK__Role__8AFACE1A802E042E");

                    b.HasIndex("UserId");

                    b.ToTable("Role", (string)null);
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("Phone")
                        .HasColumnType("bigint");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId")
                        .HasName("PK__User__1788CCACEC43C309");

                    b.HasIndex("RoleId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.UserInteraction", b =>
                {
                    b.Property<int>("InteractId")
                        .HasColumnType("int")
                        .HasColumnName("InteractID");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("Favorite")
                        .HasColumnType("bit");

                    b.Property<int>("MovieId")
                        .HasColumnType("int")
                        .HasColumnName("MovieID");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("UserID");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<bool>("Watchlist")
                        .HasColumnType("bit");

                    b.HasKey("InteractId")
                        .HasName("PK__UserInte__387AAA5AD89FA0F3");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("UserInteraction", (string)null);
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.MovieCast", b =>
                {
                    b.HasOne("MoviesDatabaseApplication.Models.Castcrew", "Cast")
                        .WithMany("MovieCasts")
                        .HasForeignKey("CastId")
                        .IsRequired()
                        .HasConstraintName("FK__MovieCast__CastI__3C69FB99");

                    b.HasOne("MoviesDatabaseApplication.Models.Movie", "Movie")
                        .WithMany("MovieCasts")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__MovieCast__Movie__3B75D760");

                    b.Navigation("Cast");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.Review", b =>
                {
                    b.HasOne("MoviesDatabaseApplication.Models.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__MovieID__46E78A0C");

                    b.HasOne("MoviesDatabaseApplication.Models.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__Review__UserID__47DBAE45");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.Role", b =>
                {
                    b.HasOne("MoviesDatabaseApplication.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.User", b =>
                {
                    b.HasOne("MoviesDatabaseApplication.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK__User__RoleId__412EB0B6");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.UserInteraction", b =>
                {
                    b.HasOne("MoviesDatabaseApplication.Models.Movie", "Movie")
                        .WithMany("UserInteractions")
                        .HasForeignKey("MovieId")
                        .IsRequired()
                        .HasConstraintName("FK__UserInter__Movie__440B1D61");

                    b.HasOne("MoviesDatabaseApplication.Models.User", "User")
                        .WithMany("UserInteractions")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK__UserInter__UserI__4316F928");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.Castcrew", b =>
                {
                    b.Navigation("MovieCasts");
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.Movie", b =>
                {
                    b.Navigation("MovieCasts");

                    b.Navigation("Reviews");

                    b.Navigation("UserInteractions");
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MoviesDatabaseApplication.Models.User", b =>
                {
                    b.Navigation("Reviews");

                    b.Navigation("Roles");

                    b.Navigation("UserInteractions");
                });
#pragma warning restore 612, 618
        }
    }
}
