Debug C# Console Applications


Review the Principles of Code Debugging and Exception Handling

Get started with testing, debugging, and exception handling

Software testing categories can be organized under the types of testing, the approaches to testing, or a combination of both. One way to categorize the types of testing is to split testing into Functional and Nonfunctional testing. 

Functional testing - Unit testing - Integration testing - System testing - Acceptance testing
Nonfunctional testing - Security testing - Performance testing - Usability testing - Compatibility testing

Testing, debugging, and exception handling are all important tasks for software developers.
Testing can be categorized into functional and nonfunctional testing, and developers are expected to perform some level of testing.
Code debugging is the process of isolating issues and identifying ways to fix them, and it's a developer responsibility.
Exception handling is the process of managing errors that occur during runtime, and developers are responsible for handling exceptions by using "try" and "catch" statements in their code.

============

use a debugger

Code debugging is a crucial skill in the software development process that every developer learns.
The best approach to debugging your applications is to use a debugger, not rereading your code five times or adding console.WriteLine() statements throughout your code.
Debuggers enable you to pause your application, step through your code line-by-line, and observe the state of variables and function parameters.

What are exceptions?

In C#, errors in the program at runtime are propagated through the program by using a mechanism called exceptions. Exceptions are thrown by code that encounters an error and caught by code that can correct the error. Exceptions can be thrown by the .NET runtime or by code in a program. Exceptions are represented by classes derived from Exception. Each class identifies the type of exception and contains properties that have details about the exception.

----
Exceptions are used in C# to propagate errors at runtime, and are represented by classes derived from the Exception class.
Exceptions are thrown by code that encounters an error and caught by code that can correct the error.
When an exception is caught, code can access its contents and take corrective action to mitigate the error.
The .NET runtime generates exceptions when it detects an error and the exception contains information about the type of error that occurred.


------------
The Visual Studio Code user interface can be used to configure, start, and manage debug sessions. The launch.json file contains the launch configurations for your application.
The Run menu provides easy access to common run and debug commands grouped into six sections.
The RUN AND DEBUG view provides access to runtime tools, including the Run and Debug controls panel. The sections of the RUN AND DEBUG view are VARIABLES, WATCH, CALL STACK, and BREAKPOINTS.
The Debug toolbar provides execution controls while your application is running such as pause/continue, step over, step into, step out, restart and stop.
The DEBUG CONSOLE is used to display messages from the debugger. The DEBUG CONSOLE can also display console output from your application.
------------
The configurations section of the Run menu provides access to edit or add launch configurations in Visual Studio Code.

The CALL STACK section is used to keep track of the current point of execution within the running application, starting with the initial point of entry into the application.

The Pause/Continue button on the Debug toolbar can be used to pause execution when the code is running and continue when code execution has been paused.

The Set Breakpoints section of the Run menu enables the developer to set breakpoints on code lines.

The "More" dropdown on the right side of the Debug toolbar enables a developer to disconnect the debugger from the current process

The Run and Debug controls panel is used to configure and start a debug session from the RUN AND DEBUG view in Visual Studio Code.

-------------------

Examine breakpoint configuration options

Set breakpoints

Remove, disable, and enable breakpoints

Conditional breakpoints

A conditional breakpoint is a special type of breakpoint that only triggers when a specified condition is met.

-----------------------

/* 
This code uses a names array and corresponding methods to display
greeting messages
*/

string[] names = new string[] { "Sophia", "Andrew", "AllGreetings" };

string messageText = "";

foreach (string name in names)
{
    if (name == "Sophia")
        messageText = SophiaMessage();
    else if (name == "Andrew")
        messageText = AndrewMessage();
    else if (name == "AllGreetings")
        messageText = SophiaMessage();
        messageText = messageText + "\n\r" + AndrewMessage();

    Console.WriteLine(messageText + "\n\r");
}

bool pauseCode = true;
while (pauseCode == true);

static string SophiaMessage()
{
    return "Hello, my name is Sophia.";
}

static string AndrewMessage()
{
    return "Hi, my name is Andrew. Good to meet you.";
}

-------------------

Cwd
The cwd attribute specifies the working directory of the target process.

Args
The args attribute specifies the arguments that are passed to your program at launch. There are no arguments by default.


Console
The console attribute specifies the type of console that's used when the application is launched. The options are internalConsole, integratedTerminal, and externalTerminal. The default setting is internalConsole. The console types are defined as:

The internalConsole setting corresponds to the DEBUG CONSOLE panel in the Panels area below the Visual Studio Code Editor.
The integratedTerminal setting corresponds to the OUTPUT panel in the Panels area below the Visual Studio Code Editor.
The externalTerminal setting corresponds to an external terminal window. The Command Prompt application that comes with Windows is an example of a terminal window.

The console attribute specifies the type of console that's used when the application is launched. The options are internalConsole, integratedTerminal, and externalTerminal. The default setting is internalConsole.

-------------------------

Monitor variables and execution flow

VARIABLES section

WATCH section

CALL STACK section

Every time your code enters a method from another method, a call layer is added to the application's call stack. When your application becomes complex and you have a long list of methods called by other methods, the call stack represents the trail of method calls.

string? readResult;
int startIndex = 0;
bool goodEntry = false;

int[] numbers = { 1, 2, 3, 4, 5 };

// Display the array to the console.
Console.Clear();
Console.Write("\n\rThe 'numbers' array contains: { ");
foreach (int number in numbers)
{
    Console.Write($"{number} ");
}

// To calculate a sum of array elements, 
//  prompt the user for the starting element number.
Console.WriteLine($"}}\n\r\n\rTo sum values 'n' through 5, enter a value for 'n':");
while (goodEntry == false)
{
    readResult = Console.ReadLine();
    goodEntry = int.TryParse(readResult, out startIndex);

    if (startIndex > 5)
    {
        goodEntry = false;
        Console.WriteLine("\n\rEnter an integer value between 1 and 5");
    }
}

// Display the sum and then pause.
Console.WriteLine($"\n\rThe sum of numbers {startIndex} through {numbers.Length} is: {SumValues(numbers, startIndex)}");

Console.WriteLine("press Enter to exit");
readResult = Console.ReadLine();

// This method returns the sum of elements n through 5
static int SumValues(int[] numbers, int n)
{
    int sum = 0;
    for (int i = n; i < numbers.Length; i++)
    {
        sum += numbers[i];
    }
    return sum;
}

-------

Recap
Here are a few important things to remember from this unit:

Monitor variable state using the VARIABLES section of the RUN AND DEBUG view.
Track an expression across time or different methods using the WATCH section of the RUN AND DEBUG view.
Use the CALL STACK section of the RUN AND DEBUG view to find the source location of an exception or a WATCH expression.
Use the VARIABLES section to change a variable's assigned value at runtime.

A developer can create a conditional breakpoint by right-clicking in the column to the left of a line number, and then selecting Add Conditional Breakpoint.

The console attribute specifies the type of console that's used when the application is launched. The options are internalConsole, integratedTerminal, and externalTerminal. The default setting is internalConsole.

--------------
Implement exception handling in C# console applications

The try-catch pattern consists of a try block followed by one or more catch clauses. Each catch block is used to specify handlers for different exceptions.
The try-finally pattern consists of a try block followed by a finally block. Typically, the statements of a finally block run when control leaves a try statement.
The try-catch-finally pattern implements all three types of exception handling blocks. A common scenario for the try-catch-finally pattern is when resources are obtained and used in a try block, exceptional circumstances are managed in a catch block, and the resources are released or otherwise managed in the finally block.

The try code block contains the guarded code that may cause an exception. If the code within a try block causes an exception, the exception is handled by a corresponding catch block.

The catch code block contains the code that's executed when an exception is caught. The catch block can handle the exception, log it, or ignore it. A catch block can be configured to execute when any exception type occurs, or only when a specific type of exception occurs.

The finally code block contains code that executes whether an exception occurs or not. The finally block is often used to clean up any resources that are allocated in a try block. For example, ensuring that a variable has the correct or required value assigned to it.


Exception handling in C# is implemented by using the try, catch, and finally keywords. Each of these keywords has an associated code block and can be used to satisfy a specific goal in your approach to exception handling.

try
{   
   // try code block - code that may generate an exception
}
catch
{   
   // catch code block - code to handle an exception
}
finally
{   
   // finally code block - code to clean up resources
}


-----
try-finally pattern nested inside a try-catch pattern:

try
{
    // Step 1: code execution begins
    try
    {
        // Step 2: an exception occurs here
    }
    finally
    {
        // Step 4: the system executes the finally code block associated with the try statement where the exception occurred
    }

}
catch // Step 3: the system finds a catch clause that can handle the exception
{   
   // Step 5: the system transfers control to the first line of the catch code block
}

-----------

Call stack unwinding is the process that the .NET runtime uses when a C# program encounters an error

The catch code block contains the code that's executed when an exception is caught. The catch block can handle the exception, log it, or ignore it.

Compiler-generated exceptions
The .NET runtime throws exceptions when basic operations fail. Here's a short list of runtime exceptions and their error conditions:

ArrayTypeMismatchException: Thrown when an array can't store a given element because the actual type of the element is incompatible with the actual type of the array.
DivideByZeroException: Thrown when an attempt is made to divide an integral value by zero.
FormatException: Thrown when the format of an argument is invalid.
IndexOutOfRangeException: Thrown when an attempt is made to index an array when the index is less than zero or outside the bounds of the array.
InvalidCastException: Thrown when an explicit conversion from a base type to an interface or to a derived type fails at runtime.
NullReferenceException: Thrown when an attempt is made to reference an object whose value is null.
OverflowException: Thrown when an arithmetic operation in a checked context overflows.


Implement a try-catch pattern to try specified code lines within your application and catch exceptions that occur within the scope of the try code block.
Use a catch clause to catch an exception thrown at the same level of the call stack.
Use a catch clause to catch an exception thrown at a higher level of the call stack.
----------

Review the solution for the create and throw exceptions challenge


string[][] userEnteredValues = new string[][]
{
            new string[] { "1", "2", "3"},
            new string[] { "1", "two", "3"},
            new string[] { "0", "1", "2"}
};

try
{
    Workflow1(userEnteredValues);
    Console.WriteLine("'Workflow1' completed successfully.");

}
catch (DivideByZeroException ex)
{
    Console.WriteLine("An error occurred during 'Workflow1'.");
    Console.WriteLine(ex.Message);
}

static void Workflow1(string[][] userEnteredValues)
{
    foreach (string[] userEntries in userEnteredValues)
    {
        try
        {
            Process1(userEntries);
            Console.WriteLine("'Process1' completed successfully.");
            Console.WriteLine();
        }
        catch (FormatException ex)
        {
            Console.WriteLine("'Process1' encountered an issue, process aborted.");
            Console.WriteLine(ex.Message);
            Console.WriteLine();
        }
    }
}

static void Process1(String[] userEntries)
{
    int valueEntered;

    foreach (string userValue in userEntries)
    {
        bool integerFormat = int.TryParse(userValue, out valueEntered);

        if (integerFormat == true)
        {
            if (valueEntered != 0)
            {
                checked
                {
                    int calculatedValue = 4 / valueEntered;
                }
            }
            else
            {
                throw new DivideByZeroException("Invalid data. User input values must be non-zero values.");
            }
        }
        else
        {
            throw new FormatException("Invalid data. User input values must be valid integers.");
        }
    }
}
--------------

Debug a C# console application using Visual Studio Code


A developer can create a conditional breakpoint by right-clicking in the column to the left of a line number, and then selecting Add Conditional Breakpoint.


The console attribute specifies the type of console that's used when the application is launched. The options are internalConsole, integratedTerminal, and externalTerminal. The default setting is internalConsole.
