BitArray


In C#, BitArray is a class provided by the .NET Framework that represents a collection of boolean values as a compact array of bits. It provides efficient storage and manipulation of bits, allowing you to perform bitwise operations on individual bits or entire arrays of bits. 

overview of BitArray:

Declaration and Initialization:

You can create a BitArray by specifying its length (number of bits) or by providing an array of bytes or integers.

// Create a BitArray with length 10 (all bits initialized to false)
BitArray bitArray1 = new BitArray(10);

// Create a BitArray from an array of bytes
byte[] bytes = { 0xAA, 0x55 }; // 10101010, 01010101
BitArray bitArray2 = new BitArray(bytes);

// Create a BitArray from an array of integers
int[] integers = { 10, 20, 30 }; // 1010, 10100, 11110
BitArray bitArray3 = new BitArray(integers);
Accessing and Manipulating Bits:

You can access and manipulate individual bits using the indexer.

BitArray bitArray = new BitArray(8); // 00000000
bitArray[2] = true; // Set the third bit to true
bitArray.Set(4, true); // Set the fifth bit to true
Bitwise Operations:

BitArray provides methods to perform bitwise operations such as AND, OR, XOR, and NOT.

BitArray bitArray1 = new BitArray(4); // 0000
BitArray bitArray2 = new BitArray(4); // 0000
bitArray1.Set(1, true); // 0010
bitArray2.Set(2, true); // 0100

bitArray1.And(bitArray2); // Performs bitwise AND operation
Enumeration:

You can enumerate over the bits in a BitArray using the GetEnumerator method or by using a foreach loop.

BitArray bitArray = new BitArray(8); // 00000000
foreach (bool bit in bitArray)
{
    Console.Write(bit ? "1" : "0"); // Output: 00000000
}

Conversion to Other Types:
You can convert a BitArray to an array of bytes or integers.

byte[] bytes = new byte[bitArray.Length / 8];
bitArray.CopyTo(bytes, 0);

int[] integers = new int[bitArray.Length / 32];
bitArray.CopyTo(integers, 0);

BitArray is useful in scenarios where you need to efficiently manipulate individual bits or perform bitwise operations on large sets of boolean values. It provides a compact and efficient representation for working with bits in C#.