Arrays

In C#, arrays are used to store collections of elements of the same data type. Arrays provide a convenient way to work with a fixed-size collection of elements. Here are some key points about arrays in C#:

Declaration and Initialization:
Arrays are declared using square brackets [].
You can declare an array and initialize it in the same statement, or you can declare it first and then initialize it later.
Arrays can be of any data type, including value types and reference types.

// Declaration and initialization
int[] numbers = { 1, 2, 3, 4, 5 };

// Declaration and later initialization
int[] moreNumbers;
moreNumbers = new int[] { 6, 7, 8, 9, 10 };

Accessing Elements:
Elements of an array are accessed using zero-based indexing.
You can access elements using square brackets [] and specifying the index of the element you want to access.

int[] numbers = { 1, 2, 3, 4, 5 };
Console.WriteLine(numbers[0]); // Output: 1

Length Property:
Arrays have a Length property that returns the total number of elements in the array.
Example:

int[] numbers = { 1, 2, 3, 4, 5 };
Console.WriteLine(numbers.Length); // Output: 5

Iterating Through Arrays:
You can iterate through the elements of an array using loops such as for loop, foreach loop, or LINQ methods.

Example using for loop:

int[] numbers = { 1, 2, 3, 4, 5 };
for (int i = 0; i < numbers.Length; i++)
{
    Console.WriteLine(numbers[i]);
}

Multidimensional Arrays:
C# supports multidimensional arrays, including rectangular arrays and jagged arrays.
Rectangular arrays have a fixed size for each dimension.
Jagged arrays are arrays of arrays where each element can be an array of different sizes.

Example of a rectangular array:

int[,] matrix = new int[2, 3]; // 2 rows, 3 columns


Example of a jagged array:

int[][] jaggedArray = new int[3][];
jaggedArray[0] = new int[] { 1, 2, 3 };
jaggedArray[1] = new int[] { 4, 5 };
jaggedArray[2] = new int[] { 6, 7, 8 };


---------------------------------------------------------------------------------
Multi-Dimensional Arrays


Multi-Dimensional Arrays:

Multi-dimensional arrays in C# allow you to store data in multiple dimensions, such as a 2D matrix or a 3D space. They are declared using commas to specify the dimensions within square brackets.

Rectangular Arrays: These are arrays where each row has the same number of columns.

Example:
int[,] matrix = new int[3, 3]; // 3x3 matrix

Accessing Elements:
You access elements using indices for each dimension separated by commas.

Example:
int[,] matrix = new int[3, 3]; // 3x3 matrix
matrix[0, 0] = 1;

Iterating Through Multi-Dimensional Arrays:
You typically use nested loops to iterate through the elements.

Example:

int[,] matrix = new int[3, 3]; // 3x3 matrix
for (int i = 0; i < 3; i++) {
    for (int j = 0; j < 3; j++) {
        matrix[i, j] = i * 3 + j;
    }
}
-------------------------------------------------------
Jagged Arrays:

Jagged arrays are arrays of arrays, where each element of the outer array can be an array of different lengths. This flexibility allows for irregularly shaped data structures.

Declaration and Initialization:
Jagged arrays are declared similar to regular arrays but with multiple sets of square brackets.

Example:

int[][] jaggedArray = new int[3][];
jaggedArray[0] = new int[] { 1, 2, 3 };
jaggedArray[1] = new int[] { 4, 5 };
jaggedArray[2] = new int[] { 6, 7, 8 };

Accessing Elements:
Accessing elements involves two levels of indexing: one for the outer array and another for the inner array.

Example:

int[][] jaggedArray = new int[3][];
jaggedArray[0] = new int[] { 1, 2, 3 };
int element = jaggedArray[0][1]; // Accessing the second element of the first inner array

Iterating Through Jagged Arrays:
You use nested loops to iterate through each element of the outer and inner arrays.

Example:

int[][] jaggedArray = new int[3][];
for (int i = 0; i < jaggedArray.Length; i++) {
    for (int j = 0; j < jaggedArray[i].Length; j++) {
        Console.WriteLine(jaggedArray[i][j]);
    }
}
Jagged arrays are especially useful when dealing with data structures where the size of the inner arrays may vary, such as in representing matrices with varying row lengths or representing sparse data.
-------------------------------------------

Param Arrays

In C#, the params keyword allows you to specify a method parameter that takes a variable number of arguments of a specified type. This feature is useful when you want to create methods that can accept a variable number of arguments without having to explicitly define an array parameter. 

Here's how you use params arrays:

Syntax:
You declare a parameter as a params array by prefixing the parameter type with the params keyword.

returnType MethodName(params type[] parameterName)
{
    // Method body
}

returnType is the type of value the method returns.
MethodName is the name of the method.
type is the type of elements in the params array.
parameterName is the name of the parameter.


Usage:
You can pass any number of arguments of the specified type when calling the method, and they will be treated as elements of an array inside the method.

void PrintNumbers(params int[] numbers)
{
    foreach (int num in numbers)
    {
        Console.WriteLine(num);
    }
}

You can call the method with any number of integer arguments:

PrintNumbers(1, 2, 3); // Output: 1, 2, 3
PrintNumbers(10, 20, 30, 40, 50); // Output: 10, 20, 30, 40, 50


Rules and Considerations:

The params parameter must be the last parameter in the method signature.
You can have only one params parameter in a method signature.
You can still call the method with an explicit array parameter if needed.
If you don't pass any arguments, the params array will be an empty array.


void Example(params string[] values)
{
    if (values.Length == 0)
    {
        Console.WriteLine("No values provided.");
    }
    else
    {
        foreach (string value in values)
        {
            Console.WriteLine(value);
        }
    }
}

Example(); // Output: No values provided.

Example("a", "b", "c"); // Output: a, b, c

The params keyword provides flexibility and convenience when working with methods that need to accept a variable number of arguments of the same type. It's commonly used in scenarios where the number of arguments passed to a method can vary, such as formatting methods or methods that perform operations on collections.